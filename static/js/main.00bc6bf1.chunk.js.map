{"version":3,"sources":["components/TabList.js","components/Body.js","App.js","reportWebVitals.js","index.js"],"names":["TabList","props","this","currentTabID","onClick","onChangeTabButton","React","Component","Body","App","state","tab_id","bind","onTabChange","console","log","newState","setState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAqBeA,E,kDAjBb,WAAYC,GAAQ,uCACZA,G,0CAMR,WACE,OACE,gCACE,8CAAiBC,KAAKD,MAAME,gBAC5B,wBAAQC,QAASF,KAAKD,MAAMI,kBAA5B,kC,GAbcC,IAAMC,WCebC,E,kDAbb,WAAYP,GAAQ,uCACZA,G,0CAGR,WACE,OACE,gD,GARaK,IAAMC,WC2CVE,E,kDAvCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,OAAQ,GAGV,EAAKN,kBAAoB,EAAKA,kBAAkBO,KAAvB,gBACzB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAPP,E,qDAUd,WACEE,QAAQC,IAAI,sBACZb,KAAKW,aAAaX,KAAKQ,MAAMC,OAAS,GAAK,K,yBAG7C,SAAYK,GACVF,QAAQC,IAAI,qCAAuCC,GACnDd,KAAKe,UAAS,SAAAP,GACZ,MAAO,CAACC,OAAQK,Q,oBAIpB,WACE,OACE,gCACE,cAAC,EAAD,CACEX,kBAAmBH,KAAKG,kBACxBF,aAAcD,KAAKQ,MAAMC,SAE3B,cAAC,EAAD,IACA,6CACA,wBAAQP,QAASF,KAAKG,kBAAtB,sBACA,4BAAIH,KAAKQ,MAAMC,gB,GAlCLL,IAAMC,WCQTW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.00bc6bf1.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nclass TabList extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n\n\n  }\n\n  render() {\n    return (\n      <div>\n        <p>I am TabList {this.props.currentTabID}</p>\n        <button onClick={this.props.onChangeTabButton}>TabListButton</button>\n      </div>\n    );\n  }\n}\n\nexport default TabList;","import React, { useState } from 'react';\n\nclass Body extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        I am Body\n      </div>\n    );\n  }\n}\n\nexport default Body;","import React, { useState } from 'react';\nimport TabList from './components/TabList'\nimport Body from './components/Body'\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      tab_id: 1,\n    };\n\n    this.onChangeTabButton = this.onChangeTabButton.bind(this)\n    this.onTabChange = this.onTabChange.bind(this)\n  }\n\n  onChangeTabButton() {\n    console.log(\"button was pressed\")\n    this.onTabChange((this.state.tab_id + 1) % 4)\n  }\n\n  onTabChange(newState) {\n    console.log(\"App.js setState called with value \" + newState)\n    this.setState(state => {\n      return {tab_id: newState}\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <TabList \n          onChangeTabButton={this.onChangeTabButton}\n          currentTabID={this.state.tab_id}\n        ></TabList>\n        <Body></Body>\n        <p>Hello Arthur</p>\n        <button onClick={this.onChangeTabButton}>Click me</button>\n        <p>{this.state.tab_id}</p>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}